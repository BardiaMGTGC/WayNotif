#!/bin/bash

# Add the following entry to /etc/sudoers (using either nano or visudo)
# phablet ALL=(ALL) NOPASSWD:/usr/bin/waydroid
USERNAME=$(whoami)

# export DBus session address
if [ -f /run/user/$(id -u)/dbus-session ]; then
   export $(cat /run/user/$(id -u)/dbus-session)
elif [ -f /run/user/$(id -u)/bus ]; then
   export DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$(id -u)/bus
else
   echo "Could not find DBus session address."
   exit 1
fi

# Check if Waydroid is installed.
if [ $(LANG=C type waydroid 2>/dev/null | wc -l) = 1 ]; then
   true
else
   echo "Waydroid is not installed"
   exit 1
fi

if [ ! -f /var/lib/waydroid/images/system.img ]; then
   echo "Waydroid is not initialized. Run waydroid init."
   exit 1
fi

# Check whether or not Waydroid or even started in the first place.
if waydroid status | grep STOPPED; then
   echo "Waydroid is not running"
   exit 1
fi

# Check if waynotif cache directory exists.
if [ ! -d $HOME/.cache/waynotif ]; then
   echo "Creating cache directory."
   mkdir -p $HOME/.cache/waynotif
fi

# Check if it is the first time waynotif is running.
if [ ! -d $HOME/.cache/waynotif/notifications/ ] || [ ! -d $HOME/.cache/waynotif/notifications2 ]; then
   echo "First run."
   mkdir $HOME/.cache/waynotif/notifications $HOME/.cache/waynotif/notifications2
   touch $HOME/.cache/waynotif/notifications/initial_notifications
   touch $HOME/.cache/waynotif/notifications2/initial_notifications
   touch $HOME/.cache/waynotif/notifications/commonname_clean_1
   touch $HOME/.cache/waynotif/notifications/commonname_clean_2
   touch $HOME/.cache/waynotif/notifications/notif_seperate-1
   touch $HOME/.cache/waynotif/notifications/notif_seperate-2
   touch $HOME/.cache/waynotif/first_run
fi

# Check if cronjob is set in place.
if crontab -l | grep waynotif >> /dev/null; then
   echo "Cronjob already exists"
else
   sudo mount -o remount,rw /
   (crontab -u "$USERNAME" -l; echo "* * * * * $HOME/waynotif") | crontab -u "$USERNAME" -
   (crontab -u "$USERNAME" -l; echo "* * * * * sleep 30; $HOME/waynotif") | crontab -u "$USERNAME" -
   echo "Cronjob has been added"
   if [ "$USERNAME" == "phablet" ]; then
      sudo mount -o remount,ro /
   fi
fi


if [ -f $HOME/.cache/waynotif/notifications/ran ]; then
   # Get notifications from dumpsys (not 100% accurate).
   echo dumpsys notification | sudo waydroid shell | egrep NotificationRecord | awk -F\| '{print $2}' | grep -v -e '^$' > $HOME/.cache/waynotif/notifications/initial_notifications
   int=1
   rm $HOME/.cache/waynotif/notifications/commonname -f
   rm $HOME/.cache/waynotif/android_process -f
   rm $HOME/.cache/waynotif/notifications/pkgname -f

   # Run a loop to convert package name to common name
   while IFS= read -r line; do

        NAME=$(echo $line)
	echo $NAME >> $HOME/.cache/waynotif/notifications/pkgname

	# This if condition checks for a notification from android system which breaks the script so it fixes it here.
        if [ "$NAME" == "android" ]; then
	   touch $HOME/.cache/waynotif/android_process
           true
        else
           waydroid app list | grep -B 1 $NAME | grep -w 'Name' | cut -c 7- >> $HOME/.cache/waynotif/notifications/commonname
        fi

        int=$((int+1))

   done < $HOME/.cache/waynotif/notifications/initial_notifications

   # Check if there are no notifications (commonname file is made in last loop).
   if [ ! -f $HOME/.cache/waynotif/notifications/commonname ]; then
      echo "No notifications available. up"
      exit 1
   fi

   # Clean the files and make them ready for next stage.
   awk '!seen[$0]++' $HOME/.cache/waynotif/notifications/pkgname > $HOME/.cache/waynotif/notifications/pkgname_clean
   awk '!seen[$0]++' $HOME/.cache/waynotif/notifications/commonname > $HOME/.cache/waynotif/notifications/commonname_clean
   cat $HOME/.cache/waynotif/notifications/commonname | uniq --count | cut -c7 - > $HOME/.cache/waynotif/notifications/commonname_notif_number

   int2=1

   rm $HOME/.cache/waynotif/notifications/notif_seperate_* -f
   rm $HOME/.cache/waynotif/notifications/commonname_clean_* -f

   # Put number of notifications in seperate file so that we can use them while creating the notification popup.
   while IFS= read -r line; do
        echo $line > $HOME/.cache/waynotif/notifications/notif_seperate_$int2
        int2=$((int2+1))
   done < $HOME/.cache/waynotif/notifications/commonname_notif_number

   int3=1

   # Put common name of notifications in seperate files so that we can use them while creating the notification popup.
   while IFS= read -r line; do
        echo $line > $HOME/.cache/waynotif/notifications/commonname_clean_$int3
        int3=$((int3+1))
   done < $HOME/.cache/waynotif/notifications/commonname_clean

   int4=1

   # Put package name of notifications in a seperate files so that we can use them while creating the notification popup.
   while IFS= read -r line; do
        echo $line > $HOME/.cache/waynotif/notifications/pkgname_clean_$int4
        int4=$((int4+1))
   done < $HOME/.cache/waynotif/notifications/pkgname

   # Ready up all variables for before doing our main checks.
   if [ -f $HOME/.cache/waynotif/notifications/notif_seperate_1 ]; then
      GDBus_Seperate1_1=$(cat $HOME/.cache/waynotif/notifications/notif_seperate_1)
   fi

   if [ -f $HOME/.cache/waynotif/notifications2/notif_seperate_1 ]; then
      GDBus_Seperate1_2=$(cat $HOME/.cache/waynotif/notifications2/notif_seperate_1)
   fi

   if [ -f $HOME/.cache/waynotif/notifications/notif_seperate_2 ]; then
      GDBus_Seperate2_1=$(cat $HOME/.cache/waynotif/notifications/notif_seperate_2)
   fi

   if [ -f $HOME/.cache/waynotif/notifications2/notif_seperate_2 ]; then
      GDBus_Seperate2_2=$(cat $HOME/.cache/waynotif/notifications2/notif_seperate_2)
   fi

   if [ -f $HOME/.cache/waynotif/notifications/commonname_clean_1 ]; then
      GDBus_CommonName1_1=$(cat $HOME/.cache/waynotif/notifications/commonname_clean_1)
   fi

   if [ -f $HOME/.cache/waynotif/notifications2/commonname_clean_1 ]; then
      GDBus_CommonName1_1=$(cat $HOME/.cache/waynotif/notifications2/commonname_clean_1)
   fi

   if [ -f $HOME/.cache/waynotif/notifications2/commonname_clean_1 ]; then
      GDBus_CommonName1_2=$(cat $HOME/.cache/waynotif/notifications2/commonname_clean_1)
   fi

   if [ -f $HOME/.cache/waynotif/notifications/commonname_clean_2 ]; then
      GDBus_CommonName2_1=$(cat $HOME/.cache/waynotif/notifications/commonname_clean_2)
   fi

   if [ -f $HOME/.cache/waynotif/notifications2/commonname_clean_2 ]; then
      GDBus_CommonName2_2=$(cat $HOME/.cache/waynotif/notifications2/commonname_clean_2)
   fi

   if [ -f $HOME/.cache/waynotif/notifications/pkgname_clean_1 ]; then
      GDBus_PkgName1_1=$(cat $HOME/.cache/waynotif/notifications/pkgname_clean_1)
   fi

   if [ -f $HOME/.cache/waynotif/notifications/pkgname_clean_2 ]; then
      GDBus_PkgName2_1=$(cat $HOME/.cache/waynotif/notifications/pkgname_clean_2)
   fi

   if [ ! -z "$GDBus_PkgName1_1" ]; then
      GDBus_Preview1_1=$(echo dumpsys notification | sudo waydroid shell | grep PendingIntent | awk '!seen[$1]++' | grep -v "contentIntent" | grep -v "deleteIntent" | sed '0,/"GDBus_PkgName1_1"/b;/"$GDBus_PkgName1_1"/d' | cut -d '"' -f 2 | sed -n '1p')
      echo $GDBus_Preview1_1 > $HOME/.cache/waynotif/notifications/preview
   fi

   if [ ! -z "$GDBus_PkgName2_1" ]; then
      GDBus_Preview2_1=$(echo dumpsys notification | sudo waydroid shell | grep PendingIntent | awk '!seen[$1]++' | grep -v "contentIntent" | grep -v "deleteIntent" | sed '0,/"GDBus_PkgName2_1"/b;/"$GDBus_PkgName2_1"/d' | cut -d '"' -f 2 | sed -n '1p')
      echo $GDBus_Preview2_1 > $HOME/.cache/waynotif/notifications/preview2
   fi

   if [ ! -z "$GDBus_Preview1_1" ]; then
      GDBus_Preview1_2=$(echo $HOME/.cache/waynotif/notifications2/preview)
   fi

   if [ ! -z "$GDBus_Preview2_1" ]; then
      GDBus_Preview2_2=$(echo $HOME/.cache/waynotif/notifications2/preview2)
   fi

   if [ ! -z "$GDBus_CommonName1_1" ]; then
      string_AppName="Waydroid $GDBus_CommonName1_1"
   fi

   if [ ! -z "$GDBus_Seperate1_1" ] && [ ! -z "$GDBus_PkgName1_1" ]; then
      string_AppNum="You have $GDBus_Seperate1_1 notification(s) $GDBus_Preview1_1"
      echo $string_AppNum > $HOME/.cache/waynotif/notifications/string
      GDBus_string1_1=$(cat $HOME/.cache/waynotif/notifications/string)
   elif [ ! -z "$GDBus_Seperate1_1" ] && [ -z "$GDBus_PkgName1_1" ]; then
      string_AppNum="You have $GDBus_Seperate1_1 notification(s)"
      echo $string_AppNum > $HOME/.cache/waynotif/notifications/string
      GDBus_string1_1=$(cat $HOME/.cache/waynotif/notifications/string)
   fi

   if [ -f $HOME/.cache/waynotif/notifications2/string ]; then
      GDBus_string1_2=$(cat $HOME/.cache/waynotif/notifications2/string)
   fi

   if [ ! -z "$GDBus_CommonName2_1" ]; then
      string_AppName2="Waydroid $GDBus_CommonName2_1"
   fi

   if [ ! -z "$GDBus_Seperate2_1" ] && [ ! -z "$GDBus_PkgName2_1" ]; then
      string_AppNum2="You have $GDBus_Seperate2_1 notification(s) $GDBus_Preview2_1"
      echo $string_AppNum2 > $HOME/.cache/waynotif/notifications/string2
      GDBus_string2_1=$(cat $HOME/.cache/waynotif/notifications/string2)
   elif [ ! -z "$GDBus_Seperate2_1" ] && [ -z "$GDBus_PkgName2_1" ]; then
      string_AppNum2="You have $GDBus_Seperate2_1 notification(s)"
      echo $string_AppNum2 > $HOME/.cache/waynotif/notifications/string2
      GDBus_string2_1=$(cat $HOME/.cache/waynotif/notifications/string2)
   fi

   if [ -f $HOME/.cache/waynotif/notifications2/string2 ]; then
      GDBus_string2_2=$(cat $HOME/.cache/waynotif/notifications2/string2)
   fi

   echo "ran up"

   # Check for empty variable to prevent empty notification.
   if [ ! -z "$GDBus_string1_1" ]; then

      # First notification test.
      if [ "$GDBus_Seperate1_1" == "$GDBus_Seperate1_2" ] && [ "$GDBus_CommonName1_1" == "$GDBus_CommonName1_2" ] && [ "$GDBus_Preview1_1" == "$GDBus_Preview1_2" ] && [ ! -z "$GDBus_Preview1_1" ]; then
         echo "No new notification(s) up notif1"
         NOTIF1="false"
      elif [ "$GDBus_Seperate1_1" != "$GDBus_Seperate1_2" ] && [ "$GDBus_CommonName1_1" == "$GDBus_CommonName1_2" ] && [ "$GDBus_Preview1_1" == "GDBus_Preview1_2" ] && [ ! -z "$GDBus_Preview1_1" ]; then
         echo "up num not same name same preview same notif1"
         gdbus call --session --dest org.freedesktop.Notifications --object-path /org/freedesktop/Notifications --method org.freedesktop.Notifications.Notify "notify-send" 1 "phone" "$string_AppName" "$string_AppNum" "[]" '{}' 5000
      elif [ "$GDBus_Seperate1_1" != "$GDBus_Seperate1_2" ] && [ "$GDBus_CommonName1_1" == "$GDBus_CommonName1_2" ] && [ "$GDBus_Preview1_1" != "GDBus_Preview1_2" ] && [ ! -z "$GDBus_Preview1_1" ]; then
         echo "up num not same name same preview not same notif1"
         gdbus call --session --dest org.freedesktop.Notifications --object-path /org/freedesktop/Notifications --method org.freedesktop.Notifications.Notify "notify-send" 1 "phone" "$string_AppName" "$string_AppNum" "[]" '{}' 5000
      elif [ "$GDBus_Seperate1_1" == "$GDBus_Seperate1_2" ] && [ "$GDBus_CommonName1_1" == "$GDBus_CommonName1_2" ] && [ "$GDBus_Preview1_1" != "GDBus_Preview1_2" ] && [ ! -z "$GDBus_Preview1_1" ]; then

         # Check for a duplicate and prevent it.
         if [ "$GDBus_string1_2" == "$GDBus_string1_1" ]; then
            NOTIF1="false"
            echo "up num same name same preview not same | same notif1"
         else
            echo "up num same name same preview not same notif1"
            gdbus call --session --dest org.freedesktop.Notifications --object-path /org/freedesktop/Notifications --method org.freedesktop.Notifications.Notify "notify-send" 1 "phone" "$string_AppName" "$string_AppNum" "[]" '{}' 5000
         fi

      elif [ "$GDBus_Seperate1_1" != "$GDBus_Seperate1_2" ] && [ "$GDBus_CommonName1_1" == "$GDBus_CommonName1_2" ] && [ "$GDBus_Preview1_1" == "GDBus_Preview1_2" ] && [ ! -z "$GDBus_Preview1_1" ]; then
         echo "up num not same name same preview same notif1"
         gdbus call --session --dest org.freedesktop.Notifications --object-path /org/freedesktop/Notifications --method org.freedesktop.Notifications.Notify "notify-send" 1 "phone" "$string_AppName" "$string_AppNum" "[]" '{}' 5000
      elif [ "$GDBus_Seperate1_1" != "$GDBus_Seperate1_2" ] && [ "$GDBus_CommonName1_1" == "$GDBus_CommonName1_2" ]; then
         echo "up num not same name same notif1"
         gdbus call --session --dest org.freedesktop.Notifications --object-path /org/freedesktop/Notifications --method org.freedesktop.Notifications.Notify "notify-send" 1 "phone" "$string_AppName" "$string_AppNum" "[]" '{}' 5000
      elif [ "$GDBus_Seperate1_1" == "$GDBus_Seperate1_2" ] && [ "$GDBus_CommonName1_1" != "$GDBus_CommonName1_2" ]; then
         echo "up num same name not same notif1"
         gdbus call --session --dest org.freedesktop.Notifications --object-path /org/freedesktop/Notifications --method org.freedesktop.Notifications.Notify "notify-send" 1 "phone" "$string_AppName" "$string_AppNum" "[]" '{}' 5000
      elif [ -f $HOME/.cache/waynotif/android_process ]; then
         echo "up android process"
         gdbus call --session --dest org.freedesktop.Notifications --object-path /org/freedesktop/Notifications --method org.freedesktop.Notifications.Notify "notify-send" 1 "phone" "$string_AppName2" "$string_AppNum2" "[]" '{}' 5000
      else
         echo "No notification(s) empty up notif1"
         NOTIF1="false"
      fi

   else
      echo "No notification(s) empty bubble up notf1"
      NOTIF1="false"
   fi

   # Check if first notification is up and if it is then sleep to make sure two notifications don't overlap.
   if [ "$NOTIF1" == "false" ]; then
      echo "no notif1 up"
   else
      sleep 6s
   fi

   # Check for empty variable to prevent empty notification.
   if [ ! -z "$GDBus_string2_1" ]; then

      # Second notification test.
      if [ "$GDBus_Seperate2_1" == "$GDBus_Seperate2_2" ] && [ "$GDBus_CommonName2_1" == "$GDBus_CommonName2_2" ] && [ "$GBus_Preview2_1" == "$GDBus_Preview2_2" ] && [ ! -z "$GDBus_Preview2_1" ] && [ ! -z "$GDBus_CommonName2_1" ]; then
         echo "No new notification(s) up notif2"
      elif [ "$GDBus_Seperate2_1" != "$GDBus_Seperate2_2" ] && [ "$GDBus_CommonName2_1" == "$GDBus_CommonName2_2" ] && [ "$GDBus_Preview2_1" == "GDBus_Preview2_2" ] && [ ! -z "$GDBus_Preview2_1" ] && [ ! -z "$GDBus_CommonName2_1" ]; then
         echo "up num not same name same preview same notif2"
         gdbus call --session --dest org.freedesktop.Notifications --object-path /org/freedesktop/Notifications --method org.freedesktop.Notifications.Notify "notify-send" 1 "phone" "$string_AppName2" "$string_AppNum2" "[]" '{}' 5000
      elif [ "$GDBus_Seperate2_1" == "$GDBus_Seperate2_2" ] && [ "$GDBus_CommonName2_1" == "$GDBus_CommonName2_2" ] && [ "$GDBus_Preview2_1" != "GDBus_Preview2_2" ] && [ ! -z "$GDBus_Preview2_1" ] && [ ! -z "$GDBus_CommonName2_1" ]; then
         echo "up num same name same preview not same notif2"
         gdbus call --session --dest org.freedesktop.Notifications --object-path /org/freedesktop/Notifications --method org.freedesktop.Notifications.Notify "notify-send" 1 "phone" "$string_AppName2" "$string_AppNum2" "[]" '{}' 5000
      elif [ "$GDBus_Seperate2_1" != "$GDBus_Seperate2_2" ] && [ "$GDBus_CommonName2_1" == "$GDBus_CommonName2_2" ] && [ "$GDBus_Preview2_1" != "GDBus_Preview2_2" ] && [ ! -z "$GDBus_Preview2_1" ] && [ ! -z "$GDBus_CommonName2_1" ]; then
         echo "up num not same name same preview not same notif2"
         gdbus call --session --dest org.freedesktop.Notifications --object-path /org/freedesktop/Notifications --method org.freedesktop.Notifications.Notify "notify-send" 1 "phone" "$string_AppName2" "$string_AppNum2" "[]" '{}' 5000
      elif [ "$GDBus_Seperate2_1" == "$GDBus_Seperate2_2" ] && [ "$GDBus_CommonName2_1" == "$GDBus_CommonName2_2" ] && [ "$GDBus_Preview2_1" != "GDBus_Preview2_2" ] && [ ! -z "$GDBus_Preview2_1" ]; then

         # Check for a duplicate and prevent it.
         if [ "$GDBus_string2_2" == "$GDBus_string2_1" ]; then
            echo "up num same name same preview not same | same notif2"
         else
            gdbus call --session --dest org.freedesktop.Notifications --object-path /org/freedesktop/Notifications --method org.freedesktop.Notifications.Notify "notify-send" 1 "phone" "$string_AppName2" "$string_AppNum2" "[]" '{}' 5000
            echo "up num same name same preview not same notif2"
         fi

      elif [ "$GDBus_Seperate2_1" != "$GDBus_Seperate2_2" ] && [ "$GDBus_CommonName2_1" == "$GDBus_CommonName2_2" ] && [ ! -z "$GDBus_CommonName2_1" ]; then
         echo "up num not same name same notif2"
         gdbus call --session --dest org.freedesktop.Notifications --object-path /org/freedesktop/Notifications --method org.freedesktop.Notifications.Notify "notify-send" 1 "phone" "$string_AppName2" "$string_AppNum2" "[]" '{}' 5000
      elif [ "$GDBus_Seperate2_1" == "$GDBus_Seperate2_2" ] && [ "$GDBus_CommonName2_1" != "$GDBus_CommonName2_2" ] && [ ! -z "$GDBus_CommonName2_1" ]; then
         echo "up num same name not same notif2"
         gdbus call --session --dest org.freedesktop.Notifications --object-path /org/freedesktop/Notifications --method org.freedesktop.Notifications.Notify "notify-send" 1 "phone" "$string_AppName2" "$string_AppNum2" "[]" '{}' 5000
      else
         echo "No notification(s) empty up notif2"
      fi

   else
      echo "No notification(s) empty bubble up notif2"
   fi

   rm $HOME/.cache/waynotif/notifications/ran -f

else

      NOTIFS=$(echo dumpsys notification | sudo waydroid shell | egrep NotificationRecord | awk -F\| '{print $2}' | grep -v -e '^$' )
      OLD_NOTIFS=$(cat $HOME/.cache/waynotif/notifications2/initial_notifications)
      STRING=$(cat $HOME/.cache/waynotif/notifications/string)
      STRING2=$(cat $HOME/.cache/waynotif/notifications2/string)

      # Compare whether or not our old notifications and new ones are the same to avoid duplicates.

      if [ "$OLD_NOTIFS" == "$NOTIFS" ] && [ "$STRING" == "$STRING2" ]; then
         echo "No new notification(s) oldnotif notif"
	 exit 1
      else

	 # Get notifications from dumpsys (not 100% accurate).
         echo dumpsys notification | sudo waydroid shell | egrep NotificationRecord | awk -F\| '{print $2}' | grep -v -e '^$' > $HOME/.cache/waynotif/notifications2/initial_notifications
         int=1
	 rm $HOME/.cache/waynotif/notifications2/commonname -f
	 rm $HOME/.cache/waynotif/android_process -f
	 rm $HOME/.cache/waynotif/notifications2/pkgname -f

 	 # Run a loop to convert package name to common name
         while IFS= read -r line; do

              NAME=$(echo $line)
	      echo $NAME >> $HOME/.cache/waynotif/notifications2/pkgname

	      # This if condition checks for a notification from android system which breaks the script so it fixes it here.
	      if [ "$NAME" == "android" ]; then
		 touch $HOME/.cache/waynotif/android_process
	      else
                 waydroid app list | grep -B 1 $NAME | grep -w 'Name' | cut -c 7- >> $HOME/.cache/waynotif/notifications2/commonname
              fi

              int=$((int+1))

         done < $HOME/.cache/waynotif/notifications2/initial_notifications

	 # Check if there are no notifications (commonname file is made in last loop).
	 if [ ! -f $HOME/.cache/waynotif/notifications2/commonname ]; then
	    echo "No notifications available. down"
	    exit 1
	 fi

	 # Clean the files and make them ready for next stage.
	 awk '!seen[$0]++' $HOME/.cache/waynotif/notifications2/pkgname > $HOME/.cache/waynotif/notifications2/pkgname_clean
         awk '!seen[$0]++' $HOME/.cache/waynotif/notifications2/commonname > $HOME/.cache/waynotif/notifications2/commonname_clean
         cat $HOME/.cache/waynotif/notifications2/commonname | uniq --count | cut -c7 - > $HOME/.cache/waynotif/notifications2/commonname_notif_number

         int2=1

	 rm $HOME/.cache/waynotif/notifications2/notif_seperate_* -f
	 rm $HOME/.cache/waynotif/notifications2/commonname_clean_* -f
	 # Put number of notifications in seperate file so that we can use them while creating the notification popup.
         while IFS= read -r line; do
              echo $line > $HOME/.cache/waynotif/notifications2/notif_seperate_$int2
              int2=$((int2+1))
         done < $HOME/.cache/waynotif/notifications2/commonname_notif_number

         int3=1

	 # Put number of notifications in seperate file so that we can use them while creating the notification popup.
         while IFS= read -r line; do
              echo $line > $HOME/.cache/waynotif/notifications2/commonname_clean_$int3
              int3=$((int3+1))
         done < $HOME/.cache/waynotif/notifications2/commonname_clean

	 int4=1

	 # Put package name of notifications in a seperate files so that we can use them while creating the notification popup.
	 while IFS= read -r line; do
	      echo $line > $HOME/.cache/waynotif/notifications2/pkgname_clean_$int4
 	      int4=$((int4+1))
	 done < $HOME/.cache/waynotif/notifications2/pkgname

	 # Ready up all variables for before doing our main checks.
	 if [ -f $HOME/.cache/waynotif/notifications2/commonname_clean_1 ]; then
	    GDBus_CommonName1_2=$(cat $HOME/.cache/waynotif/notifications2/commonname_clean_1)
 	 fi

         if [ -f $HOME/.cache/waynotif/notifications/commonname_clean_1 ]; then
            GDBus_CommonName1_1=$(cat $HOME/.cache/waynotif/notifications/commonname_clean_1)
         fi

         if [ -f $HOME/.cache/waynotif/notifications2/commonname_clean_2 ]; then
            GDBus_CommonName2_2=$(cat $HOME/.cache/waynotif/notifications2/commonname_clean_2)
         fi

         if [ -f $HOME/.cache/waynotif/notifications/commonname_clean_2 ]; then
            GDBus_CommonName2_1=$(cat $HOME/.cache/waynotif/notifications/commonname_clean_2)
         fi

         if [ -f $HOME/.cache/waynotif/notifications2/notif_seperate_1 ]; then
            GDBus_Seperate1_2=$(cat $HOME/.cache/waynotif/notifications2/notif_seperate_1)
         fi

         if [ -f $HOME/.cache/waynotif/notifications/notif_seperate_1 ]; then
            GDBus_Seperate1_1=$(cat $HOME/.cache/waynotif/notifications/notif_seperate_1)
         fi

         if [ -f $HOME/.cache/waynotif/notifications2/notif_seperate_2 ]; then
            GDBus_Seperate2_2=$(cat $HOME/.cache/waynotif/notifications2/notif_seperate_2)
         fi

         if [ -f $HOME/.cache/waynotif/notifications/commonname_clean_2 ]; then
            GDBus_Seperate2_1=$(cat $HOME/.cache/waynotif/notifications/commonname_clean_2)
         fi

 	 if [ -f $HOME/.cache/waynotif/notifications2/pkgname_clean_1 ]; then
  	    GDBus_PkgName1_2=$(cat $HOME/.cache/waynotif/notifications2/pkgname_clean_1)
 	 fi

 	 if [ -f $HOME/.cache/waynotif/notifications2/pkgname_clean_2 ]; then
 	    GDBus_PkgName2_2=$(cat $HOME/.cache/waynotif/notifications2/pkgname_clean_2)
	 fi

         if [ ! -z "$GDBus_PkgName1_2" ]; then
            GDBus_Preview1_2=$(echo dumpsys notification | sudo waydroid shell | grep PendingIntent | awk '!seen[$1]++' | grep -v "contentIntent" | grep -v "deleteIntent" | sed '0,/"GDBus_PkgName1_2"/b;/"$GDBus_PkgName1_2"/d' | cut -d '"' -f 2 | sed -n '1p')
   	 fi

         if [ ! -z "$GDBus_PkgName2_2" ]; then
            GDBus_Preview2_2=$(echo dumpsys notification | sudo waydroid shell | grep PendingIntent | awk '!seen[$1]++' | grep -v "contentIntent" | grep -v "deleteIntent" | sed '0,/"GDBus_PkgName2_2"/b;/"$GDBus_PkgName2_2"/d' | cut -d '"' -f 2 | sed -n '1p')
	 fi

         if [ ! -z "$GDBus_Preview1_2" ]; then
            GDBus_Preview1_1=$(echo $HOME/.cache/waynotif/notifications/preview)
         fi

         if [ ! -z "$GDBus_Preview2_2" ]; then
            GDBus_Preview2_1=$(echo $HOME/.cache/waynotif/notifications/preview2)
         fi

         if [ ! -z "$GDBus_CommonName1_2" ]; then
            string_AppName="Waydroid $GDBus_CommonName1_2"
         fi

 	 if [ ! -z "$GDBus_Seperate1_2" ] && [ ! -z "$GDBus_PkgName1_2" ]; then
  	    string_AppNum="You have $GDBus_Seperate1_2 notification(s) $GDBus_Preview1_2"
            echo $string_AppNum > $HOME/.cache/waynotif/notifications2/string
	    GDBus_string1_2=$(cat $HOME/.cache/waynotif/notifications2/string)
	 elif [ ! -z "$GDBus_Seperate1_2" ] && [ -z "$GDBus_PkgName1_2" ]; then
            string_AppNum="You have $GDBus_Seperate1_2 notification(s)"
            echo $string_AppNum > $HOME/.cache/waynotif/notifications2/string
	    GDBus_string1_2=$(cat $HOME/.cache/waynotif/notifications2/string)
   	 fi

	 if [ -f $HOME/.cache/waynotif/notifications/string ]; then
	    GDBus_string1_1=$(cat $HOME/.cache/waynotif/notifications/string)
	 fi

         if [ ! -z "$GDBus_CommonName2_2" ]; then
            string_AppName2="Waydroid $GDBus_CommonName2_2"
         fi

         if [ ! -z "$GDBus_Seperate2_2" ] && [ ! -z "$GDBus_PkgName2_2" ]; then
            string_AppNum2="You have $GDBus_Seperate2_2 notification(s) $GDBus_Preview2_2"
            echo $string_AppNum2 > $HOME/.cache/waynotif/notifications2/string2
	    GDBus_string2_2=$(cat $HOME/.cache/waynotif/notifications2/string2)
         elif [ ! -z "$GDBus_Seperate2_2" ] && [ -z "$GDBus_PkgName2_2" ]; then
            string_AppNum2="You have $GDBus_Seperate2_2 notification(s)"
	    echo $string_AppNum2 > $HOME/.cache/waynotif/notifications2/string2
	    GDBus_string2_2=$(cat $HOME/.cache/waynotif/notifications2/string2)
         fi

         if [ -f $HOME/.cache/waynotif/notifications/string2 ]; then
            GDBus_string2_1=$(cat $HOME/.cache/waynotif/notifications/string2)
         fi

	 echo "ran down"

	 # The first fix.
	 if [ -f $HOME/.cache/waynotif/first_run ]; then
	    gdbus call --session --dest org.freedesktop.Notifications --object-path /org/freedesktop/Notifications --method org.freedesktop.Notifications.Notify "notify-send" 1 "phone" "$string_AppName" "$string_AppNum" "[]" '{}' 5000
	    echo "first run notif down"
	    rm $HOME/.cache/waynotif/first_run -f
	    exit 1
	 fi

	 touch $HOME/.cache/waynotif/notifications/ran

         # Check for empty variable to prevent empty notification.
         if [ ! -z "$GDBus_string1_2" ]; then

	    # First notification test.
	    if [ "$GDBus_Seperate1_2" == "$GDBus_Seperate1_1" ] && [ "$GDBus_CommonName1_2" == "$GDBus_CommonName1_1" ] && [ "$GDBus_Preview1_2" == "GDBus_Preview1_1" ] && [ ! -z "$GDBus_Preview1_2" ]; then
               echo "No new notification(s) down notif1"
	       NOTIF1="false"
	    elif [ "$GDBus_Seperate1_2" != "$GDBus_Seperate1_1" ] && [ "$GDBus_CommonName1_2" == "$GDBus_CommonName1_1" ] && [ "$GDBus_Preview1_2" == "GDBus_Preview1_1" ] && [ ! -z "$GDBus_Preview1_2" ]; then
               echo "down num not same name same preview same notif1"
               gdbus call --session --dest org.freedesktop.Notifications --object-path /org/freedesktop/Notifications --method org.freedesktop.Notifications.Notify "notify-send" 1 "phone" "$string_AppName" "$string_AppNum" "[]" '{}' 5000
            elif [ "$GDBus_Seperate1_2" != "$GDBus_Seperate1_1" ] && [ "$GDBus_CommonName1_2" == "$GDBus_CommonName1_1" ] && [ "$GDBus_Preview1_2" != "GDBus_Preview1_1" ] && [ ! -z "$GDBus_Preview1_2" ]; then
               echo "down num not same name same preview not same notif1"
               gdbus call --session --dest org.freedesktop.Notifications --object-path /org/freedesktop/Notifications --method org.freedesktop.Notifications.Notify "notify-send" 1 "phone" "$string_AppName" "$string_AppNum" "[]" '{}' 5000
            elif [ "$GDBus_Seperate1_2" != "$GDBus_Seperate1_1" ] && [ "$GDBus_CommonName1_2" == "$GDBus_CommonName1_1" ] && [ "$GDBus_Preview1_2" == "GDBus_Preview1_1" ] && [ ! -z "$GDBus_Preview1_2" ]; then
               echo "down num not same name same preview same notif1"
               gdbus call --session --dest org.freedesktop.Notifications --object-path /org/freedesktop/Notifications --method org.freedesktop.Notifications.Notify "notify-send" 1 "phone" "$string_AppName" "$string_AppNum" "[]" '{}' 5000
            elif [ "$GDBus_Seperate1_2" == "$GDBus_Seperate1_1" ] && [ "$GDBus_CommonName1_2" == "$GDBus_CommonName1_1" ] && [ "$GDBus_Preview1_2" != "GDBus_Preview1_1" ] && [ ! -z "$GDBus_Preview1_2" ]; then

	       # Check for a duplicate and prevent it.
	       if [ "$GDBus_string1_2" == "$GDBus_string1_1" ]; then
	          NOTIF1="false"
                  echo "down num same name same preview not same | same notif1"
	       else
                  echo "down num same name same preview not same notif1"
                  gdbus call --session --dest org.freedesktop.Notifications --object-path /org/freedesktop/Notifications --method org.freedesktop.Notifications.Notify "notify-send" 1 "phone" "$string_AppName" "$string_AppNum" "[]" '{}' 5000
               fi

            elif [ "$GDBus_Seperate1_2" != "$GDBus_Seperate1_1" ] && [ "$GDBus_CommonName1_2" == "$GDBus_CommonName1_1" ]; then
	       echo "down num not same name same notif1"
	       gdbus call --session --dest org.freedesktop.Notifications --object-path /org/freedesktop/Notifications --method org.freedesktop.Notifications.Notify "notify-send" 1 "phone" "$string_AppName" "$string_AppNum" "[]" '{}' 5000
            elif [ "$GDBus_Seperate1_2" == "$GDBus_Seperate1_1" ] && [ "$GDBus_CommonName1_2" != "$GDBus_CommonName1_1" ]; then
	       echo "down num same name not same notif1"
	       gdbus call --session --dest org.freedesktop.Notifications --object-path /org/freedesktop/Notifications --method org.freedesktop.Notifications.Notify "notify-send" 1 "phone" "$string_AppName" "$string_AppNum" "[]" '{}' 5000
            elif [ -f $HOME/.cache/waynotif/android_process ]; then
	       echo "down android process"
	       gdbus call --session --dest org.freedesktop.Notifications --object-path /org/freedesktop/Notifications --method org.freedesktop.Notifications.Notify "notify-send" 1 "phone" "$string_AppName2" "$string_AppNum2" "[]" '{}' 5000
	    else
               echo "No notification(s) empty down notif1"
	       NOTIF1="false"
            fi

	 else
	    echo "No notification(s) empty bubble down notif1"
	    NOTIF1="false"
	 fi

	 # Check if first notification is up and if it is then sleep to make sure two notifications don't overlap.
	 if [ "$NOTIF1" == "false" ]; then
	    echo "no notif1 down"
	 else
	    sleep 6s
         fi

         # Check for empty variable to prevent empty notification.
         if [ ! -z "$GDBus_string2_2" ]; then

	    # Second notification test.
	    if [ "$GDBus_Seperate2_2" == "$GDBus_Seperate2_1" ] && [ "$GDBus_CommonName2_2" == "$GDBus_CommonName2_1" ] && [ "$GDBus_Preview2_2" == "$GDBus_Preview2_1" ] && [ ! -z "$GDBus_Preview2_1" ] && [ ! -z "$GDBus_CommonName2_2" ]; then
               echo "No new notification(s) down notif2"
            elif [ "$GDBus_Seperate2_2" != "$GDBus_Seperate2_1" ] && [ "$GDBus_CommonName2_2" == "$GDBus_CommonName2_1" ] && [ "$GDBus_Preview2_2" == "GDBus_Preview2_1" ] && [ ! -z "$GDBus_Preview2_1" ] && [ ! -z "$GDBus_CommonName2_2" ]; then
               echo "down num not same name same preview same notif2"
               gdbus call --session --dest org.freedesktop.Notifications --object-path /org/freedesktop/Notifications --method org.freedesktop.Notifications.Notify "notify-send" 1 "phone" "$string_AppName2" "$string_AppNum2" "[]" '{}' 5000
            elif [ "$GDBus_Seperate2_2" == "$GDBus_Seperate2_1" ] && [ "$GDBus_CommonName2_2" == "$GDBus_CommonName2_1" ] && [ "$GDBus_Preview2_2" != "GDBus_Preview2_1" ] && [ ! -z "$GDBus_Preview2_1" ] && [ ! -z "$GDBus_CommonName2_2" ]; then
               echo "down num same name same preview not same notif2"
               gdbus call --session --dest org.freedesktop.Notifications --object-path /org/freedesktop/Notifications --method org.freedesktop.Notifications.Notify "notify-send" 1 "phone" "$string_AppName2" "$string_AppNum2" "[]" '{}' 5000
            elif [ "$GDBus_Seperate2_2" != "$GDBus_Seperate2_1" ] && [ "$GDBus_CommonName2_2" == "$GDBus_CommonName2_1" ] && [ "$GDBus_Preview2_2" != "GDBus_Preview2_1" ] && [ ! -z "$GDBus_Preview2_1" ] && [ ! -z "$GDBus_CommonName2_2" ]; then
               echo "down num not same name same preview not same notif2"
            elif [ "$GDBus_Seperate2_1" == "$GDBus_Seperate2_2" ] && [ "$GDBus_CommonName2_1" == "$GDBus_CommonName2_2" ] && [ "$GDBus_Preview2_1" != "GDBus_Preview2_2" ] && [ ! -z "$GDBus_Preview2_1" ]; then

	       # Check for a duplicate and prevent it.
               if [ "$GDBus_string2_2" == "$GDBus_string2_1" ]; then
                  echo "down num same name same preview not same | same notif2"
               else
		  echo "down num same name same preview not same notif2"
                  gdbus call --session --dest org.freedesktop.Notifications --object-path /org/freedesktop/Notifications --method org.freedesktop.Notifications.Notify "notify-send" 1 "phone" "$string_AppName2" "$string_AppNum2" "[]" '{}' 5000
               fi

            elif [ "$GDBus_Seperate2_2" != "$GDBus_Seperate2_1" ] && [ "$GDBus_CommonName2_2" == "$GDBus_CommonName2_1" ] && [ ! -z "$GDBus_CommonName2_2" ]; then
	       echo "down num not same name same notif2"
               gdbus call --session --dest org.freedesktop.Notifications --object-path /org/freedesktop/Notifications --method org.freedesktop.Notifications.Notify "notify-send" 1 "phone" "$string_AppName2" "$string_AppNum2" "[]" '{}' 5000
            elif [ "$GDBus_Seperate2_2" == "$GDBus_Seperate2_1" ] && [ "$GDBus_CommonName2_2" != "$GDBus_CommonName2_1" ] && [ ! -z "$GDBus_CommonName2_2" ]; then
	       echo "down num same name not same notif2"
	       gdbus call --session --dest org.freedesktop.Notifications --object-path /org/freedesktop/Notifications --method org.freedesktop.Notifications.Notify "notify-send" 1 "phone" "$string_AppName2" "$string_AppNum2" "[]" '{}' 5000
            else
               echo "No notification(s) empty down notif2"
            fi

         else
            echo "No notification(s) empty bubble down notif2"
         fi

      fi

fi
